require 'mongo'
require 'mongoid'
require 'devise'
require 'dropbox-api'
require 'docsplit'
require 'settingslogic'
require 'delayed_job_mongoid'
require 'validates_timeliness'

$:.unshift File.dirname(__FILE__)

DOKK_ENV = ENV['DOKK_ENV']
if DOKK_ENV.nil?
 puts "Error: Please provide the environment on the DOKK_ENV variable (e.g., DOKK_ENV=production ./dokk_dropbox.rb)"
 exit
end
puts "Dokk-Dropbox Processor is running in #{DOKK_ENV} mode"

# WARNING: this is required when the script runs as a daemon. The Ruby "daemon" gem changes
# directory to "/" when it starts.
Dir.chdir(File.dirname(File.absolute_path(__FILE__)) )


# ---------------------------------------------------------------------------------------------
# naive way to deal with dependencies
# ---------------------------------------------------------------------------------------------
# (1) Follow this article for using autload to this more dynamically
# http://talklikeaduck.denhaven2.com/2009/04/06/all-that-you-might-require
# (2) Follow this article for better bundling of artifacts shared between a Rails app and
# this console application.
# http://stackoverflow.com/questions/10654469/undefined-method-devise-when-including-user-model-outside-rails
# ---------------------------------------------------------------------------------------------
require_relative 'initializers/dokk_logger'
require_relative 'initializers/settings'
require_relative 'initializers/devise'
require_relative 'initializers/dropbox-api'
require_relative 'initializers/mongo.rb'
require 'models/alexandria_cloud_model'
require 'models/permanent_record'
require 'models/document_type'
require 'models/document'
require 'models/role'
require 'models/user'
require 'models/member_status'
require 'models/member'
require 'models/organization'
require 'models/client'
require 'models/case'
require 'models/imported_document'
require 'models/dropbox_case_folder'
require 'store/asset_store'
require 'document_processing/document_util'
require 'document_processing/process_file_uploads'

at_exit {  puts "This run is over!" }

$stdout.reopen("output.log", "w")
$stdout.sync = true
$stderr.reopen($stdout)

DokkLogger.instance.level(Logger::INFO)

# ---------------------------------------------------------------------------------------------
# end of naivette
# ---------------------------------------------------------------------------------------------
require 'models/document'
require 'dropbox/client'


# ---------------------------------------------------------------------------------------------
# Load mongoid configuration#
# ---------------------------------------------------------------------------------------------
Mongoid.load!("config/mongoid.yml", DOKK_ENV)

DROPBOX_STAGING_DIR = 'dropbox_downloads'
