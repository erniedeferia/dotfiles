(ns nlp.training
  (:use [clojure.pprint :as pp]
        [opennlp.nlp]
        [clojure.java.io]
        [clojure.string as :str]
        )
    (:require
       [clj-time.format :as ttf]
       [clj-time.local :as l]
       [clj-time.core :as tt :exclude [second]])
  )

(def last-name-file       "resources/last-names")
(def first-name-file      "resources/first-names")
(def request-clause-file  "resources/request-clauses")
(def subject-clause-file  "resources/subject-clauses")
(def custom-formatter     (f/formatter "MMM d yyyy 'at' hh:mma"))


(defn -read-file
 "Read entire content of file and split by lines.
  Returns array of lines."
 [file]
 (str/split-lines (slurp file))
 )

(defn -generate-fullname
  [last-names first-names]
  (clojure.string/join " " [(rand-nth first-names) (rand-neth last-names)])
  )

(defn -generate-request-clause
  [request-clauses]
  (rand-nth request-clauses)
  )

(defn -generate-participants-clause
  [a-fn a-ln]
  (let [participant-count (+ (rand-int 3) 1) ;; arbitrarily set to 1-3 participants
        seq-p (take participant-count (repeatedly #(-generate-fullname a-fn a-la)))
        participants (case participant-count
                       3 (str (first seq-p) ", " (nth 1 seq-p) ", and " (nth 2 seq-p))
                       2 (str (first seq-p) " and "  (second seq-p))
                       (first seq-p)
                       )
        ]
     (str "with " participants)
    )
  )

(defn -generate-datetime
  (let [d (l/local-now)]
     (ttf/unparse custom-formatter d)
    )
  )

(defn -generate-subject
  [subject-clauses]
  (rand-nth subject-clauses)
  )

(defn -generate-sentence
  "Generates a single sentence with the following specification.
   [Request-Clause] [Participant-Clause] [DateTime-Clause] [Duration-Clause] [Subject-Clause].
   Where each of the clauses is generated randomly from a possible set of pre-defined values.
   An example: [Please schedule a meeting] [with Adam Smith and Sonya Smith] [on January 2016
   at 1:30pm] [for 1 hour] [to discuss x, y and z]."
  []
  (let [last-names (-read-file last-name-file)
        first-names (-read-file first-name-file)
        request-clauses (-read-file request-clause-file)
        subject-clauses (-read-file subject-clause-file)
        ]
    (str/str (-generate-request-clause request-clauses)
         " "
         (-generate-participants-clause last-names first-names)
         " "
         (-generate-datetime)
         " "
         (-generate-subject subject-clauses)
         "."
         )
    )
  )
