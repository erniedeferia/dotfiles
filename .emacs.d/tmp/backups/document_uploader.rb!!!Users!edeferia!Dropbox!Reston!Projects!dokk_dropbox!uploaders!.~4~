# encoding: utf-8
#
# This class performs the equivalent task of the similarly named one from the
# Rails project. Its name should not convey that it actually deals with
# uploaded documents. On the contrary, it deals with documents "downloaded"
# from the Dropbox service. It is intended to simulate the same behavior
# as its namesake when a file is uploaded via the Rails application.
#
class DocumentUploader

  cattr_accessor :config, :env

  # Set this in an initializer using DocumentUploader.config = {...}
  self.config = {}

  def initialize( model )
   @model = model
   config = self.config
   @store = (self.env == 'development') ? FileStorage.new(config) : S3Storage.new(config)
  end

  #
  #
  # Main entry point into this class.
  #
  #
  #
  def store_file(file)
    @original_filename = File.basename(file)
    @store.store(file, "#{Settings.rails_app_root_path}/#{store_dir}/#{pretty_filename}")
  end

  def store_dir
    "original"
  end

  def extension_white_list
     %w(pdf tif docx xlsx txt)
  end

  def filename
    "#{@model.id}_#{@original_filename}" if @original_filename
  end

  def pretty_filename
    "#{@model.id}_#{@original_filename}" if @original_filename
  end

  class FileStorage
    def initialize( config )
       @root_folder = config[:root_directory]
    end
    def store(file, file_path)
       copy(file, file_path)
    end
    def copy(source, target)
     File.open(source, 'rb') do |infile|
       File.open(target, 'wb') do |outfile2|
         while buffer = infile.read(4096)
          outfile2 << buffer
         end
       end
     end
    end
  end

  class S3Storage
    def initialize( config )
      @store = DOKK::Store::AssetStore.new
    end
    def store(file, file_path)
       @store.save_file(file,file_path)
    end
  end

end
