modulejs.define('jquery', function () {
    return jQuery;
});

modulejs.define('knockout', function () {
 return ko;
});

modulejs.define('billing_entry_module',['jquery', 'knockout'], function($,ko) {

    BillingEntry = function(data) {
        var self = this;


        /// FIELDS
        if( typeof data === 'undefined' || data == null ) {
            self.id = null;
            self.type = ko.observable("BillingEntryTime"); // by default
            self.billing_date = ko.observable( alexandria_cloud.dateMongoDBFormat(new Date()));
            self.description = ko.observable("");
            self.details = ko.observable("");
            self.case_number = ko.observable(null).extend({required:
                                                           { message: "You must select a Case",
                                                             params: '^[0-9]{4}-[0-9]{6}' },
                                                           minLength: 11});
            self.time_units = ko.observable("1.0");
            self.rate = ko.observable("0.00");
            self.amount = ko.observable(parseFloat("180.00").toFixed(2));
       }
       else {
            self.id = data.id;
            self.type = ko.observable(data.type);
            self.billing_date = ko.observable(alexandria_cloud.fromMongoDateToDisplayFormat(data.billing_date));
            self.description = ko.observable(data.description);
            self.details = ko.observable(data.details);
            self.case_number = ko.observable(data.case_number).extend({required:
                                                           { message: "You must select a Case",
                                                             params: '^[0-9]{4}-[0-9]{6}' },
                                                           minLength: 11});
            self.time_units = ko.observable(data.time_units != null ? data.time_units : "1.0");
            self.rate = ko.observable(data.rate != null ? data.rate : "0.00");
            self.amount = ko.observable(data.amount);
        }
        /// FIELDS

        self.errors = ko.validation.group(self);

        self.reset = function() {
            self._reset();
            self.errors.showAllMessages(false);
        };

        self._reset = function() {
            self.id = null;
            self.type("BillingEntryTime");
            self.description("");
            self.details("");
            self.case_number("");
            self.time_units("1.0");
            self.rate("0.00");
            self.amount("0.00");
            self.errors = ko.validation.group(self);
        };

        self.rate.subscribe( function(newRate) {
            self.updateAmount();
        });

        self.updateAmount = function() {
            self.amount( (self.time_units() * self.rate()).toFixed(2) );
        };

        self.toTimeEntry = function() {
            return {
                id: self.id,
                billing_date: alexandria_cloud.fromDisplayToMongoDateFormat(self.billing_date()),
                description: self.description(),
                details: self.details(),
                case_number: self.case_number(),
                time_units: self.time_units(),
                rate: self.rate(),
                amount: self.amount()
            };
        };

        self.toExpenseEntry = function() {
            return {billing_date: alexandria_cloud.fromDisplayToMongoDateFormat(self.billing_date())
                    ,id: self.id
                    ,description: self.description()
                    ,details: self.details()
                    ,case_number: self.case_number()
                    ,amount: self.amount() };
        };

        self.buildStoredMessageForExpenseEntry = function() {
            return "Saved your Expense billing for a total of $" + self.amount();
        };
        self.buildStoredMessageForTimeEntry = function() {
            return "Saved your Time billing of " + self.time_units() + " hours for a total of $" + self.amount();
        };

    };

    BillingEntryViewModel = function(entry) {
        var self = this;
console.log("editing entry: %o", entry);
        self.mapping = {
           create: function(options) {
              return new BillingEntry(options.data);
           }
        };

        /// VIEW MODEL ATTRIBUTES
        self.billing_type = ko.observable("time_billing");
        self.billing_entry = ko.observable( new BillingEntry(entry) );
        self.recent_entries = ko.mapping.fromJS([]);
        ////

        self.rebind = function() {
           var viewScope = $('#billing-container')[0];
           ko.cleanNode( viewScope);
           ko.applyBindings(self, viewScope);
        };

        self.isTimeEntry = function() {
            return self.billing_entry().type() == "BillingEntryTime";
        };

        self.notify = function(msg) {
            $('#global-flash').empty().append('<div class="alert alert-warn">' + msg + '</div>');
        };

        self.recentEntries = function() {
            var url = "/organizations/" + $organizationID + "/billing_entries.json?recent=true";
            $.getJSON(url)
                .done( function(data) {
                    ko.mapping.fromJS(data, self.mapping, self.recent_entries);
                    return self.recent_entries;
                })
                .fail( function(err) {
                    console.log(err);
                });
        };

        self.storeTimeEntry = function() {
            if( self.billing_entry().errors().length === 0 ) {
                var d = null;
                var o = self.billing_entry().toTimeEntry();

                if( o.id == null || o.id == "" ) {
                    d = self.postTimeEntry(o);
                }
                else {
                    d = self.putTimeEntry(o);
                }

                d.done( function() {
                    self.notify(self.billing_entry().buildStoredMessageForTimeEntry());
                    self.clearEntry();
                })
                .done( function() {
                   self.recentEntries();
                })
                .fail( function(err) {
                        console.log("error: %o", err);
                });
            }
        };

       self.putTimeEntry = function(t) {
            var url = "/organizations/" + $organizationID +
                      "/billing_entry_times/" + t.id + ".json";
            return $.ajax({
                type: "PUT",
                dataType: "json",
                url: url,
                data: t
            });

       };

        self.postTimeEntry = function(t) {
            delete t.id;
            var url = "/organizations/" + $organizationID + "/billing_entry_times.json";
            return $.ajax({
                type: "POST",
                dataType: "json",
                url: url,
                data: {billing_entry_time: t}
            });
        };

        self.storeExpenseEntry = function() {

            if( self.billing_entry().errors().length === 0 ) {
                var d = null;
                var o = self.billing_entry().toExpenseEntry();

                if( o.id == null || o.id == "" ) {
                    d = self.postExpenseEntry(o);
                }
                else {
                    d = self.putExpenseEntry(o);
                }

                d.done( function() {
                    self.notify(self.billing_entry().buildStoredMessageForExpenseEntry());
                    self.clearEntry();
                })
                .done( function() {
                   self.recentEntries();
                })
                .fail( function(err) {
                        console.log("error: %o", err);
                });
            }

        };

        self.postExpenseEntry = function(t) {
            delete t.id;
            var url = "/organizations/" + $organizationID + "/billing_entry_expenses.json";
            return $.ajax({
                type: "POST",
                dataType: "json",
                url: url,
                data: {billing_entry_expense: t}
            });
        };

        self.putExpenseEntry = function(t) {
            var url = "/organizations/" + $organizationID + "/billing_entry_expenses/" +
                      t.id + ".json";
            return $.ajax({
                type: "PUT",
                dataType: "json",
                url: url,
                data: t
            });
        };

        self.editEntry = function(n) {
           self.billing_entry(n);
           var viewScope = $('#billing-container')[0];
           alexandria_cloud.init_all(viewScope);
           alexandria_cloud.init_events(viewScope);
        };

        self.clearEntry = function() {
            self.billing_entry().reset();
            self.getRate();
        };

        self.storeBillingEntry = function() {
            if( self.billing_entry().type() == "BillingEntryTime")
                self.storeTimeEntry();
            else
                self.storeExpenseEntry();

        };

        self.getRate = function() {
            var url = (self.billing_entry().case_number() != "")
                    ?  "/organizations/" + $organizationID +
                    "/billing_member_rates/" + $billingMemberRate +  ".json" +
                    "?case_number=" + self.billing_entry().case_number()
                    :  "/organizations/" + $organizationID +
                    "/billing_member_rates/" + $billingMemberRate + ".json";

            $.getJSON(url)
                .done( function(data) {
                    self.billing_entry().rate( parseFloat(data.rate).toFixed(2) );
                });
        };

        self.clearActiveEntry = function() {
           self.billing_entry( new BillingEntry() );
           var viewScope = $('#billing-container')[0];
           alexandria_cloud.init_all(viewScope);
           alexandria_cloud.init_events(viewScope);
        };
    };

    return { billingEntryModel: BillingEntry,
             billingEntryViewModel: BillingEntryViewModel };

}); // end of module definition
