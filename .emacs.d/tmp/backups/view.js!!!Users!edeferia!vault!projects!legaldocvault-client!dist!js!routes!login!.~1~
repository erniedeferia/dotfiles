define(function(require) {
  'use strict';

  var Backbone = require('backbone');
  var templates = require('templates');
  var nprogress = require('nprogress');

  return Backbone.View.extend({

    el: document.body,

    cache: {
      inputs: {},
      alerts: {}
    },

    events: {
      'click button#submit-login-form': 'onLoginClick'
    },

    hideAlerts: function() {
      _.each(this.cache.alerts, function($alert) {
        $alert.hide();
      });
    },

    onLoginClick: function(event) {

      console.log("on login click callback called");
      event.preventDefault();
      this.hideAlerts();

      var username = this.cache.inputs.$username.val();
      var password = this.cache.inputs.$password.val();

      nprogress.start();

      console.log("logging in");

      this.model.login(username, password)
        .bind(this)
        .then(this.onLoginSuccess)
        .catch(this.onLoginFail)
        .finally(nprogress.done);
    },

    cacheElements: function() {
      this.cache.inputs.$username = this.$el.find('input#username');
      this.cache.inputs.$password = this.$el.find('input#password');
      this.cache.alerts.$invalidLogin = this.$el.find('#invalid-login-alert');
      this.cache.alerts.$noToken = this.$el.find('#no-token-alert');
      this.cache.alerts.$loggedOut = this.$el.find('#logged-out-alert');
      this.cache.alerts.$passwordReset = this.$el.find('#password-reset-alert');
    },

    onLoginSuccess: function() {
      console.log("login successful");
      Backbone.history.navigate('/', true);
    },

    onLoginFail: function(err) {
      this.cache.inputs.$username.val('').focus();
      this.cache.inputs.$password.val('');

      console.log("login failed");

      if (err.code === 401 && err.message === 'Invalid login credentials') {
        this.cache.alerts.$invalidLogin.show();
      }
    },

    render: function() {
      var template = templates('routes/login/login');
      var data = {
        noToken: (window.location.search === '?no-token'),
        loggedOut: (window.location.search === '?logged-out'),
        passwordReset: (window.location.search === '?password-reset')
      };

      this.$el.html(template(data));
      this.cacheElements();

      // detect invalid login alert
      if (window.location.search === '?invalid-login') {
        this.cache.alerts.$invalidLogin.show();
      }
    },

    destroy: function() {
      delete this.cache;
      this.$el.html('');
    }

  });

});
