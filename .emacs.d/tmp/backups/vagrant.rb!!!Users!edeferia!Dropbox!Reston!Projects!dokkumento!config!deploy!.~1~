# to reference it elsewhere
set :location, "localhost"

server "localhost", :app, :primary => true
set :deploy_to, "/dokkumento/www/dokkweb"

set :repository, "git@github.com:erniedeferia/dokkumento.git"
set :branch, "develop"
set :scm_passphrase, ""

set :ssh_options, {port: 2222, keys: ['~/.vagrant.d/insecure_private_key']}

#ssh_options[:keys] = ["/Users/edeferia/.ssh/RestonTechEC2Key01.pem"]

set :rails_env, :staging
set :rvm_ruby_string, 'ruby-2.1.0'
set :rvm_type, :user  #:system
role :web, location                          # Your HTTP server, Apache/etc
role :app, location                          # This may be the same as your `Web` server

set :delayed_job_args, "-n 2"
set :user, "ubuntu"

# Look at the recipes.rb file in the delayed_job gem directory
# for options which can be passed into the start command to,
# for example, span multi[le daemons.

before "deploy", "predeploy:stop_delayed_job"
before "deploy", "predeploy:stop_thin"
before "deploy", "predeploy:stop_nginx"
before "deploy", "deploy:upload_symmetric_keys"

after  "deploy", "deploy:upload_secrets"
after  "deploy", "deploy:assets:precompile"
after  "deploy", "deploy:symlink_assset_store"
after  "deploy", "delayed_job:start"
after  "deploy", "deploy:ensure_uploads_dir"
after  "deploy", "deploy:upload_solr_config"
after  "deploy", "deploy:upload_nginx_config"
after  "deploy", "deploy:upload_ssl"
after  "deploy", "deploy:upload_thin_config"
after  "deploy", "deploy:start_daemons"
#after  "deploy", "deploy:reset_mongo"
after  "deploy", "deploy:seed_mongo"
after  "deploy", "deploy:restart_jetty"

namespace :predeploy do
  # Notice that I am not using the built-in delayed job recipe because I
  # want to be able to continue on error. With the built in recipe, this
  # option cannot be set because the task is not being defined in this
  # file. I am, HOWEVER, using the built-in recipe to start the task.
  # (see above, delayed_job:start)
  task :stop_delayed_job, :on_error => :continue do
    run "cd #{current_path}; script/delayed_job stop #{rails_env}"
  end
  task :stop_nginx, :on_error => :continue do
    run %Q{cd #{current_path} && scripts/stop_nginx}
  end
  task :stop_thin, :on_error => :continue  do
    run %Q{cd #{current_path} && scripts/stop_thin}
  end
end


namespace :deploy do
  task :install_gems do
    puts "Installing gems"
    run "cd #{current_path};  bundle install RAILS_ENV=#{rails_env}"
  end
  task :reset_mongo do
    puts "Resetting MongodB"
    run "cd #{current_path};  RAILS_ENV=#{rails_env} rake db:drop "
  end
  task :seed_mongo do
    puts "Seeding MongodB"
    run "cd #{current_path};  RAILS_ENV=#{rails_env} rake db:seed "
  end
  task :upload_symmetric_keys do
    puts "Copying symmetric keys..."
    top.upload("#{rails_root}/../dokkumento_config/rails/symmetric-keys/alexandriacloud_staging.key", "/dokkumento/www/rails/symmetric-keys/", :via => :scp, :recursive => true   ) do |channel, name, sent, total|
      puts "#{channel}:#{name} sent #{sent} of #{total}";
    end
    top.upload("#{rails_root}/../dokkumento_config/rails/symmetric-keys/alexandriacloud_staging.iv", "/dokkumento/www/rails/symmetric-keys/", :via => :scp, :recursive => true   ) do |channel, name, sent, total|
      puts "#{channel}:#{name} sent #{sent} of #{total}";
    end
  end
  task :upload_secrets do
    puts "Copying secrets file"
    top.upload("#{rails_root}/secrets/secrets.yml", "#{current_path}/secrets/", :via => :scp) do |channel, name, sent, total|
      puts "#{channel}:#{name} sent #{sent} of #{total}";
    end
  end
  namespace :assets do
    task :precompile, :roles => :web, :except => { :no_release => true } do
      run %Q{cd #{latest_release} && #{rake} RAILS_ENV=#{rails_env} #{asset_env} assets:precompile}
    end
  end
  task :upload_solr_config do
    puts "Copying Solr configuration files..."
    top.upload("#{rails_root}/../dokkumento_config/solr/conf/", "/usr/share/solr/dokkumento/", :via => :scp, :recursive => true )
  end
  task :upload_nginx_config do
    puts "Copying STAGING nginx configuration files..."
    top.upload("#{rails_root}/../dokkumento_config/nginx/dokkumento_staging.conf", "/dokkumento/nginx/dokkumento.conf", :via => :scp, :recursive => true  )
  end
  task :upload_ssl do
    puts "Copying SSL certificate"
    top.upload("#{rails_root}/secrets/ssl/staging/server.crt", "/dokkumento/www/ssl/", :via => :scp )
    puts "Copying the ssl key"
    top.upload("#{rails_root}/secrets/ssl/staging/server.key", "/dokkumento/www/ssl/", :via => :scp )
  end
  task :upload_thin_config do
     puts "Copying thin configuration file"
     top.upload("#{rails_root}/../dokkumento_config/thin/dokkumento.yml", "/etc/thin/", :via => :scp, :recursive => true  )
  end
  task :symlink_assset_store do
    run %Q{cd #{latest_release}/public/ && ln -s  /dokkumento/www/dokkweb/shared/asset_store asset_store }
  end
  task :start_daemons do
    run "cd #{current_path} && chmod +x scripts/*"
    run %Q{cd #{current_path} && scripts/start_thin staging}
    run "cd #{current_path} && scripts/start_nginx"
  end
  task :restart_jetty do
    run %Q{sudo /etc/init.d/jetty restart}
  end
  task :ensure_uploads_dir do
    run "cd #{current_path} && mkdir public/uploads"
  end
end
