define(function(require) {
  'use strict';

  // dependencies
  var $ = require('jquery');
  var config = require('config');
  var bPromise = require('bluebird');
  var token = require('js/utils/token');

  // we define the object (as opposed to just returning it) so that we have
  // reference to the `fn` scope; thus, making context management easier
  var fn = {

    /**
     * Performs a request against the API.
     *
     * @private
     *
     * @param String method Represents the HTTP method that will be used when
     *   making the request.
     * @param String url Represents the URL extension (of the base API url) that
     *   will be requested.
     * @param Mixed data Any data you want to send to endpoints that support
     *   the HTTP methods: POST or PUT.
     * @return Promise If successful, returns the response data. Otherwise,
     *   returns an error with the HTTP status code and the response from the
     *   server.
     */
    _request: function(method, url, data) {
      return new bPromise(function(resolve, reject) {
        var options = {
          type: method.toUpperCase(),
          dataType: 'json',
          url: (config.api.url + url),
          data: data || {},
          xhrFields: {
            withCredentials: true
          },
          headers: {
            Authorization: ('Basic ' + token.get())
          }
        };

        $.ajax(options)
          .success(resolve)
          .fail(function(xhr) {
            if (xhr.status === 200) {
              return resolve(xhr.responseText);
            }

            // the error wasn't known so just return this data
            reject({
              code: xhr.status,
              message: (xhr.responseJSON || xhr.responseText)
            });
          });
      });
    },

    /**
     * Performs a GET request against the API.
     *
     * @public
     *
     * @param String url Represents the URL extension (of the base API) that
     *   will be requested.
     * @return Promise If successful, returns the response data. Otherwise,
     *   returns an error with the HTTP status code and the response from the
     *   server.
     */
    get: function(url) {
      return fn._request('get', url, {});
    },

    /**
     * Performs a POST request against the API.
     *
     * @public
     *
     * @param String url Represents the URL extension (of the base API) that
     *   will be requested.
     * @param Mixed data Any data you want to send along with the POST request.
     * @return Promise If successful, returns the response data. Otherwise,
     *   returns an error with the HTTP status code and the response from the
     *   server.
     */
    post: function(url, data) {
      return fn._request('post', url, data);
    },

    /**
     * Performs a PUT request against the API.
     *
     * @public
     *
     * @param String url Represents the URL extension (of the base API) that
     *   will be requested.
     * @param Mixed data Any data you want to send along with the PUT request.
     * @return Promise If successful, returns the response data. Otherwise,
     *   returns an error with the HTTP status code and the response from the
     *   server.
     */
    put: function(url, data) {
      return fn._request('put', url, data);
    },

    /**
     * Performs a DELETE request against the API.
     *
     * @public
     *
     * @param String url Represents the URL extension (of the base API) that
     *   will be requested.
     * @return Promise If successful, returns the response data. Otherwise,
     *   returns an error with the HTTP status code and the response from the
     *   server.
     */
    delete: function(url) {
      return fn._request('delete', url, {});
    }

  };

  return fn;

});
