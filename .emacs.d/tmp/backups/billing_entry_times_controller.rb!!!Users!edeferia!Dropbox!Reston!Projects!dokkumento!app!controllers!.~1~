class BillingEntryTimesController < AlexandriaCloudController
 before_action :set_resource_type


  def resource
   @billing_entry = retrieve_object(params) if is_update?(params)
   @billing_entry = create_object(params) if !is_update?(params)
   logger.info "CREATED RESOURCE @billing_entry has values: #{@billing_entry.inspect}"
   @billing_entry
  end

  def logit
    logger.info "Logging a call to action"
  end

  def self.set_resource_type
    t = params[:billing_entry][:_type].constantize
    self.class.defaults :resource_class => t
  end

  def build_resource_params
    #[params.permit(:time_units, :rate, :amount, :description, :billing_date, :case_id, :organization_id, :member_id)]
    [params.require(:billing_entry).permit(:_type, :time_units, :rate, :amount, :description, :billing_date, :case_id, :organization_id, :member_id)]
  end
#params.require(params[:type].to_sym).permit(:client, :model, :attributes)

 private
  def is_update?(params)
    params.has_key?(:id)
  end

  def retrieve_object(params)
    params[:type].constantize.find(params[:id])
  end

  def create_object(params)
     if params.has_key?(:billing_entry)
       logger.info "CREATING OBJECT WITH #{params[:billing_entry]}"
     end
     logger.info "CREATING TYPE #{params[:billing_entry][:_type].constantize}"
#     params[:billing_entry][:_type].constantize.new(params[:billing_entry].except{|k| k == :_type }) if params.has_key?(:billing_entry)
    params[:billing_entry][:_type].constantize.new(params[:billing_entry].except{|k| k == :_type}) if params.has_key?(:billing_entry)
     params[:billing_entry][:_type].constantize.new if !params.has_key?(:billing_entry)
  end


end
