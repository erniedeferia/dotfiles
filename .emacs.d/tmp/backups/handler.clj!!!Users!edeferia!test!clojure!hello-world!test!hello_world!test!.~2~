(ns hello-world.test.handler
  (:use clojure.test
        ring.mock.request
        hello-world.handler
        [monger.collection :only [insert insert-batch]]
        [hiccup.core]
        ring.middleware.basic-authentication
        [ring.middleware.params]
        [ring.middleware.multipart-params]
        [hiccup.middleware :only (wrap-base-url)])
  (:require [compojure.route :as route]
            [compojure.handler :as handler]
            [compojure.response :as response]
            [clojure.java.io :as io]
            [monger.core :as mg]
            [monger.json]
            [monger.collection :as mc]
            [monger.gridfs :only [store-file make-input-file filename content-type metadata] :as mgfs]
            [ring.middleware.json :as middleware]
            [clojure.data.json :as cjson]
            [clj-json.core :as json])
  (:import [java.io File]
           [org.bson.types ObjectId]
           [com.mongodb DB WriteConcern])
  )


(defn- request-wrapper-authenticated
  [request-params]
  (let [url (:url request-params)]
    (header (request :get url) "Authorization" "Basic dGVzdDp0ZXN0")
    )
  )

(defn- request-wrapper-unauthenticated
  [request-params]
  (let [url (:url request-params)]
    (header (request :get url) "Authorization" "invalid user name")
    )
  )

(defn- post-wrapper-authenticated
  [request-params]
  (let [url (:url request-params)]
    (header (request :post url request-params) "Authorization" "Basic dGVzdDp0ZXN0")
    )
  )

;;(header (request :get "http://localhost:3000/documents/") "Authorization" "Basic dGVzdDp0ZXN0" )
(deftest test-app
  "Notice how the handler's init function must be called explicitly."
  (hello-world.handler/init)

  (testing "main route"
    (let [response (app  (request-wrapper-authenticated {:url "http://localhost:3000/documents"}) )]
      (is (= (:status response) 200))))

  (testing "not-found route"
    (let [response (app (request-wrapper-authenticated {:url "http://localhost:3000/invalid"}))]
      (is (= (:status response) 404))))

  (testing "not-found route"
    (let [response (app (request-wrapper-authenticated {:url "http://localhost:3000/documents/52bcc63430047a69c16e3898"}))]
      (println response)
      (is (= (:status response) 200))))

  (testing "unauthenticated request"
    (let [response (app (request-wrapper-unauthenticated {:url "http://localhost:3000/documents"}))]
      (is (= (:status response) 401))))

  (testing "posting a file should work"
    (let [response (app (post-wrapper-authenticated {:url "http://localhost:3000/documents"  :params {"file" (clojure.java.io/file "test/test-resources/test.txt")}}))]
      (is (= (:status response) 401))))


  )
