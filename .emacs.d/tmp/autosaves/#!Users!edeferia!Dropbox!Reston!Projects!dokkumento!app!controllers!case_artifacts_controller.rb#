class CaseArtifactsController < AlexandriaCloudController
 include TermsOfServicesAgreement

  def index
    organization_id = current_user.member.organization.id
    c = Case.find( params[:case_id] )
    @case_artifacts = CaseArtifact.for_organization(organization_id).for_case(c.id)

    #
    # If the case doesn't have artifacts, create from case type.
    #
    @case_artifacts = populate_for_case(c,@case_artifacts)

    index! do |format|
      format.json do
        render json: @case_artifacts
      end
    end
  end


 protected

  #
  # If the case's artifact collection has not been created, then iterate
  # over the templates for the case type and create the artifact collection.
  # Always check for differences between the templates associated with a case
  # type and what is currently in the case. If different, then add the missing
  # ones to the case artifacts collection.
  #
  def populate_for_case ( caseObj, case_artifacts )
    org = current_user.member.organization

    # A case type has only ONE artifact. The artifact object will contain one or
    # more document templates in the #templates attribute.
    type_artifact = CaseTypeArtifact
                       .for_organization(org.id)
                       .where( :practice_area_id => PracticeArea
                                   .where(:name => caseObj.practicearea)
                                   .first.id ).first
    if !type_artifact.nil?

      #
      # Build an array of template ids from the current case artifacts
      #
      case_templates = Array.new
      case_artifacts.each { |ct| case_templates << ct.document_template_id }

      #
      # Start withe case type templates (there might be new ones) and remove
      # any that already exist in the case templates collections built above.
      #
      type_templates = type_artifact.templates.map{ |t| t.id }.delete_if {|t| case_templates.include? t }
g
      #
      # Add any missing templates to the case artifacts collection.
      #
      type_templates.each do |t|
        ca = CaseArtifact.new
        ca.case = caseObj
        ca.organization = org
        ca.document_template_id = t
        ca.save!
      end
    end
    CaseArtifact.for_organization(org.id).for_case(caseObj.id)
  end

end
