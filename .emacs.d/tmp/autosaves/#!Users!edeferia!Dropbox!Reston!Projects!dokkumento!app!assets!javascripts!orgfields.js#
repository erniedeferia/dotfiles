var fn_make_label_editable = null;
var fn_make_type_editable  = null;
var fn_make_display_order_editable = null;
var row_id = 0;
var fieldTypes = {'f_string':'Text','f_integer': 'Number', 'f_date': 'Date'};
// This variable is used to determine when a field has been fully defined;
// meaning, all its attributes have been entered by the user.
var haveUncommittedField = false;


///// BEGINS DEFINITION OF ORG FIELDS VIEW ///////
function OrgFieldsView() {
};

OrgFieldsView.delete = function( elem ) {
   // if elem is a number, then this row has not yet been saved and the actual
   // mongo id is not available yet. Hence, we'll delete the row by the row_id
   // which is what is passed to this function in this case. See the createRow()
   // for how this happens.

   console.log("detele called with %o", elem);

   if( !isNaN(elem) ) {
     var rowToDelete = $("#fields-table tr[type='new'][row_id='" + elem + "']");
     $(rowToDelete).delay(300).fadeOut('slow');
     $(rowToDelete).remove();
     return false;
   }

   if( confirm("Are you sure you want to delete this field?") ) {

     OrgFieldsModel.delete(elem).done( function() {
        var rowToDeleteFilter = "td:eq(0):contains(" + elem  + ")";
        var rowToDelete = $('tr').find(rowToDeleteFilter).parent();
        $(rowToDelete).delay(300).fadeOut('slow');
        $(rowToDelete).remove();
        console.log( "Custom field record deleted and row removed from table.");
      });

    }
    else {
      console.log("user chose not to delete");
    }
    return false;
};

OrgFieldsView.removeDeleteRow = function() {
  console.log("Field deleted. How do we pass state to this handler");
};

// This function submits JSON post for the label and order attributes
// of field once the label has been entered.
OrgFieldsView.processNew = function(row_id, fn_success_callback, fn_error_callback) {

  var field_id = $("#fields-table tr[type='new'][row_id='" + row_id + "']").find("td:eq(0)").text();
`  var fieldTypeKey = "field_type";
  var fieldTypeValue = $("#fields-table tr[type='new'][row_id='" + row_id + "']").find("td:eq(3)").text();
  var fieldOrderKey = "display_order";
  var fieldOrderValue = $("#fields-table tr[type='new'][row_id='" + row_id + "']").find("td:eq(4)").text();;

  OrgFieldsModel.update(row_id, field_id, fieldTypeKey, fieldTypeValue, fn_success_callback, fn_error_callback);
  OrgFieldsModel.update(row_id, field_id, fieldOrderKey, fieldOrderValue, fn_success_callback, fn_error_callback);

};
///// ENDS DEFINITION OF ORG FIELDS VIEW //////

////// BEGINS DEFINITION OF ORG FIELDS MODEL //////
function OrgFieldsModel() {
};

OrgFieldsModel.delete = function(id) {
     var deleteUrl = "/case_fields/" + id;

     var deletePromise =
     $.post(deleteUrl, {_method: 'delete'})
         .fail(function(){console.log("Failed to delete field");})
         .always(function(){console.log("Done POSTing request to delete field.");});
   return deletePromise;
 };

OrgFieldsModel.update = function(row_id, field_id, key, value, fn_success_callback, fn_error_callback) {
    var jsonData = { 'id': field_id, 'key': key, 'value': value };
    if( row_id > 0 )
      jsonData["row_id"] = row_id;

    $.ajax({
      type: "POST",
      dataType: 'json',
      data: jsonData,
      url: "/case_fields/fieldupdate.json",
      success: fn_success_callback,
      error: fn_error_callback
    });

};
///// ENDS DEFINITION OF ORG FIELDS MODEL ///////


$(document).ready( function() {
 var oTable = $('#fields-table');

  //--------------------------------------------------------------------------------------------
  // Generic post function to be used in all editable fields. it multiplexs the call to the
  // appropriate success hanlder based on the attribute "target_field" added to the jeditable
  // field's settings attribute.
  //--------------------------------------------------------------------------------------------
  function doFieldPost(value, settings)
  {

    var field_id = $(this.parentNode).find("td:eq(0)").text();
    var field_key = $(this).attr('name');

    /* some ugly multiplexing until i figure out how to invoke dynamically */
    var fn_success = null;
    if ( settings.target_field == 'field_label' )
       fn_success = processLabel;
    else if( settings.target_field == 'field_type' )
       fn_success = processType;
    else if( settings.target_field == 'display_order' )
       fn_success = processDisplayOrder;
    else
      alert('unimplemented field processing function');

    OrgFieldsModel.update(row_id, field_id, field_key, value, fn_success);

    return (value);
  }

  //--------------------------------------------------------------------------------------------
  // process the edit label success callback
  //--------------------------------------------------------------------------------------------
  function processLabel(data)
  {
       console.log("processing label");

       if( row_id > 0 ) {
         var rowSelector =  "#fields-table tr[type='new'][row_id='" + row_id  + "']";
	       $(rowSelector).find("td:eq(0)").text(data.id);
         $(rowSelector).find("td:eq(1)").text( data.value.replace(new RegExp(" ", 'g'), "_") );
         // once we enter the field name we consider it committed

         // if this a new field, then update the backend model with the default values for
         // the type and order attributes.
         if( haveUncommittedField ) {
           console.log("updating other field attribute because this one is new...");
           OrgFieldsView.processNew(row_id, function(e){
              console.log("successfully added field: %o", e);},
            function(err) {
              console.log("Error while adding field: %o", err);
              $('#global-flash').addClass('alert alert-error').text("Error while adding field: " + err.message);
            }
           );
         }

         haveUncommittedField = false;
       }
       return data.value;
  }

 //--------------------------------------------------------------------------------------------
 // process thte edit type success callback
 //--------------------------------------------------------------------------------------------
  function processType(data)
  {
       if( row_id > 0 ) {
         var rowSelector =  "#fields-table tr[type='new'][row_id='" + row_id  + "']";
	       $(rowSelector).find("td:eq(0)").text(data.id);
	       $(rowSelector).find("td:eq(3)").val(data.value);
       }
       console.log("processType:success return data.value with %o", data.value )
       return "ok";
  }

  //--------------------------------------------------------------------------------------------
  // process the edit display order success callback
  //--------------------------------------------------------------------------------------------
  function processDisplayOrder(data)
  {
      //if( row_id > 0 ) {
      //  var rowSelector =  "#fields-table tr[type='new'][row_id='" + row_id  + "']";
      //	 $(rowSelector).find("td:eq(0)").text(data.id);
         //$(rowSelector).find("td:eq(1)").text( data.value.replace(new RegExp(" ", 'g'), "_") );
      // }
       return data.value;
  }


  //--------------------------------------------------------------------------------------------
  // makes the a label field editable
  //--------------------------------------------------------------------------------------------
  function makeLabelEditable(selector)
  {
   /* turn the field_label cell editable */
    $(selector).editable( doFieldPost,//processLabel,
    {
     target_field: "field_label",
     cancel : '<button class="btn btn-default btn-forced-margin" type="cancel" >Cancel</button>',
     submit : '<button class="btn btn-success btn-forced-margin" type="submit" >OK</button>',
     tooltip : "Click to edit...",
     placeholder: "Edit...",
     callback: function(sValue, y) {
      var targetRow = $(this);
      console.log("targetRow: %o", targetRow);
      console.log("sValue: %o, y: %o", sValue, y);
      $(this).find("td:eq(2)").text( sValue.value );
      return (sValue.value);
    },
    "height": "20px",
    "width": "60%"
   });
  };

  //--------------------------------------------------------------------------------------------
  // cache a reference to the makeLabelEditable function to be used in the new field handler
  // and call it with the correct jQuery selector to make the field editable.
  //--------------------------------------------------------------------------------------------
  fn_make_label_editable = makeLabelEditable;
  makeLabelEditable("#fields-table td[name='field_label']");


  //--------------------------------------------------------------------------------------------
  // makes the type field editable
  //--------------------------------------------------------------------------------------------
  function makeTypeEditable(selector)
  {
   /* turn the field_type cell editable */
    $(selector).editable( doFieldPost, //processType, // "/case_fields/fieldupdate.json",
    {
     target_field: "display_order",
     cancel : "<button class='btn btn-default btn-forced-margin' type='cancel' >Cancel</button>",
     submit : "<button class='btn btn-success' type='submit' >OK</button>",
     type: 'select',
     data: fieldTypes,
     tooltip : "Click to edit...",
     placeholder: "Select...",
     callback: function(sValue, y) {
      var targetRow = $(this);
      $(this).find("td:eq(4)").text( sValue.value );
      return (sValue.value);
     },
     onblur: 'cancel',
     "height": "16px",
     "width": "50%"
   });
  };
  //--------------------------------------------------------------------------------------------
  // cache a reference to the makeTypeEditable function to be used in the new field handler
  // and call it with the correct jQuery selector to make the field editable.
  //--------------------------------------------------------------------------------------------
  fn_make_type_editable = makeTypeEditable;
  makeTypeEditable("#fields-table td[name='field_type']");


  //--------------------------------------------------------------------------------------------
  // makes the type field editable
  //--------------------------------------------------------------------------------------------
  function makeDisplayOrderEditable(selector)
  {
   /* turn the field_type cell editable */
    $(selector).editable( doFieldPost, //processType, // "/case_fields/fieldupdate.json",
    {
     target_field: "display_order",
     cancel : "<button class='btn btn-default btn-forced-margin' type='cancel' >Cancel</button>",
     submit : "<button class='btn btn-success' type='submit' >OK</button>",
     type: 'text',
     tooltip : "Click to edit...",
     placeholder: "Edit...",
     callback: function(sValue, y) {
      var targetRow = $(this);
      $(this).html(fieldTypes[sValue]);
     },
     onblur: 'cancel',
     "height": "16px",
     "width": "50%"
   });
  };
  //--------------------------------------------------------------------------------------------
  // cache a reference to the makeTypeEditable function to be used in the new field handler
  // and call it with the correct jQuery selector to make the field editable.
  //--------------------------------------------------------------------------------------------
  fn_make_display_order_editable = makeDisplayOrderEditable;
  makeDisplayOrderEditable("#fields-table td[name='display_order']");



  //--------------------------------------------------------------------------------------------
  // event hanlder for button to add a new field
  //--------------------------------------------------------------------------------------------
  function newRow() {
    createRow();
  };

  function createRow() {
    row_id++;
    var newRow = $('<tr></tr>').attr('type','new').attr('row_id', row_id);
    $(newRow).append( $('<td></td>').attr('style','display:none;').text('')  );
    $(newRow).append( $('<td></td>').attr('name','field_name').text('')  );
    $(newRow).append( $('<td></td>').attr('name','field_label').attr('title','Click to edit...').text('')  );
    $(newRow).append( $('<td></td>').attr('name','field_type').attr('style','display:none;').attr('title','Click to edit...').text('')  );
    $(newRow).append( $('<td></td>').attr('name','display_order').attr('title','Click to edit...').text('1')  );

    var actionCell = $('<td></td>').attr('name','action');
    var actionBtnGroupDiv =  $('<div></div>').addClass('btn-group');
    $(actionBtnGroupDiv)
       .append( $('<a></a>').addClass('btn-small btn-primary dropdown-toggle').attr('data-toggle','dropdown')
          .append( "Actions" )
          .append( $('<span></span>').addClass('caret') )
       )
       .append( $('<ul></ul>').addClass('dropdown-menu')
          .append( $('<li></li>')
            .append( $('<a></a>')
               .attr('href','javascript:void(0);')
               .attr('onclick',"OrgFieldsView.delete(" + row_id  + ")")
               .text('Delete')
            )
          )
       )

    $(actionCell).append( actionBtnGroupDiv );

    $(newRow).append( actionCell );

    var fieldsTable =  $('#fields-table tbody');

    $(fieldsTable).append( newRow );

    fn_make_type_editable  ("#fields-table tr[type='new'] td[name='field_type']");
    fn_make_label_editable ("#fields-table tr[type='new'] td[name='field_label']");
    fn_make_display_order_editable ("#fields-table tr[type='new'] td[name='display_order']");

    haveUncommittedField = true;

  };

  function cloneRow() {
    var highestDisplayOrder = parseInt( $('#fields-table tr:last').find('td:eq(4)').text() );

    // select the second row (index 1) which is the first non-header row
    var firstRow = $('table > tbody > tr').eq(1).clone();// .find('td:eq(0)').html();
    $('#fields-table tr:last').after(firstRow);

    row_id++;

    // set the type attribute to new so that the autoedit code works
    $('#fields-table tr:last').attr('type', 'new');
    $('#fields-table tr:last').attr('row_id', row_id);
    $('#fields-table tr:last').find('td:eq(0)').text('');
    $('#fields-table tr:last').find('td:eq(1)').text('');
    $('#fields-table tr:last').find('td:eq(2)').text('');
    $('#fields-table tr:last').find('td:eq(3)').text('f_string');
    $('#fields-table tr:last').find('td:eq(4)').text(++highestDisplayOrder);

    fn_make_type_editable  ("#fields-table tr[type='new'] td[name='field_type']");
    fn_make_label_editable ("#fields-table tr[type='new'] td[name='field_label']");
    fn_make_display_order_editable ("#fields-table tr[type='new'] td[name='display_order']");

    haveUncommittedField = true;

  };


  $('#add-field').click( newRow );


});
