(finaicore.core/-main)
(exit)
(finaicore.core/-main)
exit
(exit)
(finaicore.core/test-csv "/Users/edeferia/Dropbox/Reston/Projects/finai/finaicore/SPHIX.txt")
(finaicore.core/test-csv "/Users/edeferia/Dropbox/Reston/Projects/finai/finaicore/funds/SPHIX.txt")
(finaicore.core/test-csv "~/Dropbox/Reston/Projects/finai/funds/SPHIX.txt")
(finaicore.core/test-csv "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/SPHIX.txt")
(def data (finaicore.core/test-csv "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/SPHIX.txt"))
(println data)
(data :first)
(map #(nth % 3) data)
(map #(nth % 4) data)
(map #(nth % 4) (rest data))
(into [] (map #(nth % 4) (rest data)))
(def closing-prices (into [] (map #(nth % 4) (rest data))))
(stats/variance closing-prices)
(variance closing-prices)
(Double. "10.3") 
(map #(Double. %) closing-prices)
(def v-prices (map #(Double. %) closing-prices))
(variance v-prices)
(sd v-prices)
(variance (take 10 v-prices))
(variance (take-last 10 v-prices))
(variance (take-last 50 v-prices))
(variance (take-last 200 v-prices))
(variance (take-last 162 v-prices))
(comment "next lines are to compute the simple expected returns")
(partition 2 1 v-prices)
(map (partial #(+ %1 %2)) (partition 2 1 v-prices))
(map (partial #(+ %1 %2) %) (partition 2 1 v-prices))
(map (partial #(+ %1 %2) %0) (partition 2 1 v-prices))
(map #(+ %1 %2)  (partition 2 1 v-prices))
(map (partial +)  (partition 2 1 v-prices))
(map (partial + %)  (partition 2 1 v-prices))
(map (print %)  (partition 2 1 v-prices))
(map #(print %)  (partition 2 1 v-prices))
(map #(print (nth 0 %))  (partition 2 1 v-prices))
(map #(print (nth 1 %))  (partition 2 1 v-prices))
(map #(print (nth % 1))  (partition 2 1 v-prices))
(map #(* (nth % 1) (nth % 0))  (partition 2 1 v-prices))
(map #(- (* (nth % 1) (nth % 0)) 1 )  (partition 2 1 v-prices))
(map #(- (/ (nth % 1) (nth % 0)) 1 )  (partition 2 1 v-prices))
(exit)
(def data (finaicore.core/test-csv "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/SPHIX.txt"))
(finaicore.core/closing-price data)
(exit)
(def data (finaicore.core/test-csv "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/SPHIX.txt"))
(finaicore.core/risk-simple (finaicore.core/closing-price data))
(average [1 2 3])
(avg [1 2 3])
(count [1 2 3])
(def prices (closing-price data))
 (reduce + (apply Æ’(- (/ (nth % 1) (nth % 0)) 1))  (partition 2 1 prices)) 
 (reduce + (apply #(- (/ (nth % 1) (nth % 0)) 1))  (partition 2 1 prices)) 
 (map #(- (/ (nth % 1) (nth % 0)) 1)  (partition 2 1 prices)) 
 (reduce + (map #(- (/ (nth % 1) (nth % 0)) 1)  (partition 2 1 prices)))
(exit)
(def data (finaicore.core/test-csv "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/SPHIX.txt"))
(def prices (closing-price data))
(expected-returns-simple prices)
(risk-simple prices)
(exit)
(def data (finaicore.core/test-csv "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/SPHIX.txt"))
(def prices (closing-price data))
(expected-returns-simple prices)
(+ 1 (expected-returns-simple prices))
(pow (+ 1 (expected-returns-simple prices)) 12)
(defn annual-ret (pow (+ 1 (expected-returns-simple prices)) 12))
(def annual-ret (pow (+ 1 (expected-returns-simple prices)) 12))
(* annual-ret 1000.00)
(def annual-ret (pow (+ 1 (expected-returns-simple (take 36 prices))) 12))
(print annual-ret)
(use 'finaicore.core :reload)
(print prices)
(def data (finaicore.core/test-csv "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/SPHIX.txt"))
(def prices (closing-price data))
(print prices)
(expected-returns-simple prices)
(view (histogram prices))
(view (chart prices))
(keys (ns-publics 'chart))
(keys (ns-publics 'charts))
(keys (ns-publics 'incanter/charts))
(keys (ns-publics 'incanter.charts))
(view (time-series-plot prices))
(meta time-series-plot)
(doc time-series-plot)
(data)
(print data)
(def dates (map #(nth 0 %) (rest data)))
(print dates)
(first dates)
(nth 3 dates)
(def dates (map #(nth % 0) (rest data)))
(print dates)
(view (time-series-plot dates prices))
(print prices)
(count prices)
(view (time-series-plot (take [1..931]) prices))
(view (time-series-plot (take [1 931]) prices))
(view (time-series-plot (take 931 (iterate inc 0))  prices))
(avg prices)
(exit)
(avg [1 2 3 4])
exit
(avg [1 2 3 4])
(doc +)
(avg [1 2 3 4])
(exit)
(avg [1 2 3 4])
(avg [1.0 2.0 3.0 4.0])
(float (count [1 2]))
(Math/sqrt 3)
(fi-sum [3 4 5])
(exit)
(fi-sum [3 4 5])
(exit)
(fi-sum [3 4 5])
(exit)
(fi-scale [3 4 5] 3)
(exit)
(fi-scale [3 4 5] 3)
(apply max [3 4 5 6 7 8])
(apply min [3 4 5 6 7 8])
(fi-log [3 4 5 6 7 8])
(exit)
(fi-log [3 4 5 6 7 8])
(exit)
(fi-positive-part [-1 2 4])
(max [3 4 5])
(apply max [3 4 5])
(Math/max 2 3)
(exit)
(fi-positive-part [1 2 3 4 -8])
(fi-negative-part [1 2 3 4 -8])
(fi-stdev [1 2 3 4 -8])
(map #(Math/max % 0.0) [1 2 3 4 -8])
(map #(Math/max 0.0 %) [1 2 3 4 -8])
(map #(Math/sqrt %) [1 2 3 4 -8])
(Math/max 2 3)
(exit)
(fi-stdev [1 2 3 4 -8])
(fi-negative-part [1 2 3 4 -8])
(apply + (fi-negative-part [1 2 3 4 -8]))
(apply + (fi-positive-part [1 2 3 4 -8]))
(exti)
(exit)
(fi-dot-product [1 1 1] [1 1 1])
(fi-dot-product [1 3 1] [1 1 1])
(fi-dot-product [1 3 1] [1 13 1])
(fi-dot-product [1 3 1] [1 138 1])
(fi-dot-product [1 3 1] [1 138 1 5])
(fi-dot-product [1 3 1 4] [1 138 1 5] [2 6 1 4])
 (into [] (map Æ’(- %2 %1) (partition 2 1 [1 3 4 5 6 7]))) 
 (into [] (map #(- %2 %1) (partition 2 1 [1 3 4 5 6 7]))) 
 (into [] (map #(partial #(- %2 %1)) (partition 2 1 [1 3 4 5 6 7]))) 
 (into [] (map #(partial #(- %2 %1) %) (partition 2 1 [1 3 4 5 6 7]))) 
 (into [] (map #(partial #(- %2 %1)) % (partition 2 1 [1 3 4 5 6 7]))) 
 (into [] (map #(partial #(- %2 %1)) %) (partition 2 1 [1 3 4 5 6 7]))) 
 (into [] (map #(partial #(- %2 %1)) %) (partition 2 1 [1 3 4 5 6 7])) 
 (into [] (map #(partial #(- %2 %1) %) (partition 2 1 [1 3 4 5 6 7])) 
)
 (into [] (map #(partial #(- %2 %1) %) (partition 2 1 [1 3 4 5 6 7]))) 
(into [] #(map #(%) % (partition 2 1 [1 2 3 4 5 6 7 8])) )
(into [] (map #(%) % (partition 2 1 [1 2 3 4 5 6 7 8])) )
(into [] (map #(%)  (partition 2 1 [1 2 3 4 5 6 7 8])) )
(into [] (map #(+ % %)  (partition 2 1 [1 2 3 4 5 6 7 8])) )
(into [] (map #(+ %1 %2)  (partition 2 1 [1 2 3 4 5 6 7 8])) )
(into [] (map #(+ (nth % 0) (nth 1 %) )  (partition 2 1 [1 2 3 4 5 6 7 8])) )
(into [] (map #(+ (nth % 0) (nth % 1) )  (partition 2 1 [1 2 3 4 5 6 7 8])) )
(into [] (map #(- (nth % 0) (nth % 1) )  (partition 2 1 [1 2 3 4 5 6 7 8])) )
(into [] (map #(- (nth % 0) (nth % 1) )  (partition 2 1 [89 2 3 4 5 6 7 8])) )
(into [] (map #(- (nth % 0) (nth % 1) )  (partition 2 1 [89 2 3 8 5 6 7 8])) )
(exit)
(fi-diff [2 2 3 4 5 7 4 2])
(fi-diff [2 1 4 2])
(exit)
(fi-log-returns [1 2 2 3 3 4 4 5 6 7 ])
(exit)
(fi-log-returns [1 2 2 3 3 4 4 5 6 7 ])
(doall (map #(+ (nth % 0) (nth % 1)) [1 1 1 ] [1 1 1 ]))
(doall (map #(+ (nth % 0) (nth % 1)) (1 1 1) (1 1 1) ))
(doall (map #(+ (nth % 0) (nth % 1)) '(1 1 1) '(1 1 1) ))
(doall (map #(+ %0 %1) '(1 1 1) '(1 1 1) ))
(doall (map #(+ %1 %2) '(1 1 1) '(1 1 1) ))
(doall (map #(+ %1 %2) '(1 1 1) '(1 1 1 4) ))
(doall (map #(+ %1 %2) [1 1 1] [1 1 1 4] ))
(into [] (map #(+ %1 %2) [1 1 1] [1 1 1 4] ))
(exit)
(fi-sharpe-ration [1 5 3 12 4 17] [1 2 3 4 5 6])
(exit)
(fi-sharpe-ratio [1 5 3 12 4 17] [1 2 3 4 5 6])
(defn test [first & second] (do (print first) (print second))) 
(defn test-args [first & second] (do (print first) (print second))) 
(test-args 5)
(test-args 5 6)
(defn test-args [first & second] (doall (print first) (print second))) 
(test-args 5 6)
(test-args 5 6 7)
(exit)
(def data (finaicore.core/test-csv "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/SPHIX.txt"))  
(def data (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/SPHIX.txt"))  
(exit)
(def data (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/SPHIX.txt"))  
(def fund_closing (fi-data-get-asset-closing-price data))
(def data (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/benchmark_sp500.txt"))  
(def benchmark_closing (fi-data-get-asset-closing-price data))
(fi-sharpe-ratio fund_closing benchmark_closing)
(use 'clj-time.format)
(show-formatters)
(map #(parse (formatters :date) (nth % 1)) data )
(map #(print (nth % 0)) data)
(map #(parse (formatters :date) (nth % 0)) data )
(map #(parse (formatters :date) (nth % 0)) (rest data) )
(exit)
(def data (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/benchmark_sp500.txt"))  
(map #(parse (formatters :date) (nth % 1)) data )
(map #(parse (formatters :date) (nth % 0)) data )
(map #(parse (formatters :date) (nth % 0)) (rest data) )
(filter  #(> % (.DateTime "2002-01-01"))  (map #(parse (formatters :date) (nth % 0)) (rest data) ))
(filter  #(> % (parse "2002-01-01"))  (map #(parse (formatters :date) (nth % 0)) (rest data) ))
(filter  #(> % (parse (formatters :date) "2002-01-01"))  (map #(parse (formatters :date) (nth % 0)) (rest data) ))
(parse (formatters :date) "2002-01-01")
(> (parse (formatters :date) "2012-01-01") (parse (formatters :date) "2002-01-01"))
(compare (parse (formatters :date) "2012-01-01") (parse (formatters :date) "2002-01-01"))
(filter  #(compare % (parse (formatters :date) "2002-01-01"))  (map #(parse (formatters :date) (nth % 0)) (rest data) ))
(count (filter  #(compare % (parse (formatters :date) "2002-01-01"))  (map #(parse (formatters :date) (nth % 0)) (rest data) )))
(count (filter  #(compare % (parse (formatters :date) "2012-01-01"))  (map #(parse (formatters :date) (nth % 0)) (rest data) )))
(count (filter  #(>  (compare % (parse (formatters :date) "2012-01-01")) 1)  (map #(parse (formatters :date) (nth % 0)) (rest data) )))
(count (filter  #(>  (compare % (parse (formatters :date) "2012-01-01")) 0)  (map #(parse (formatters :date) (nth % 0)) (rest data) )))
(compare (parse (formatters :date) "2012-01-01") (parse (formatters :date) "2002-01-01"))
(compare (parse (formatters :date) "2012-01-01") (parse (formatters :date) "2012-01-01"))
(compare (parse (formatters :date) "2012-01-01") (parse (formatters :date) "2013-01-01"))
(exit)
(def data (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/benchmark_sp500.txt"))  
(defn recent-filter [ob] (> (compare ob (parse (formatters :date) "2012-01-01")) 1 ))
(fi-data-filter-asset-historical-data  data recent-filter)
(defn recent-filter [ob] #(> (compare ob (parse (formatters :date) "2012-01-01")) 1 ))
(fi-data-filter-asset-historical-data  data recent-filter)
(defn recent-filter [ob] #(boolean (> (compare ob (parse (formatters :date) "2012-01-01")) 1 )))
(fi-data-filter-asset-historical-data  data recent-filter)
(defn recent-filter [ob] #(if (> (compare ob (parse (formatters :date) "2012-01-01")) 1 ) 1 true false))
(defn recent-filter [ob] #(if (> (compare ob (parse (formatters :date) "2012-01-01")) 1 )  true false))
(fi-data-filter-asset-historical-data  data recent-filter)
(defn recent-filter [ob] #(if (> (compare ob (parse (formatters :date) "2012-01-01")) 0 )  true false))
(fi-data-filter-asset-historical-data  data recent-filter)
(exit)
(def data (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/benchmark_sp500.txt"))  
(fi-data-filter-asset-historical-data-test  data )
(exit)
(def data (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/benchmark_sp500.txt"))  
(fi-data-filter-asset-historical-data-test  data )
(defn recent-filter [ob] #(if (> (compare ob (parse (formatters :date) "2012-01-01")) 0 )  true false))
(recent-filter (parse (formatters :date) "2012-01-02"))
(defn recent-filter [ob] (if (> (compare ob (parse (formatters :date) "2012-01-01")) 0 )  true false))
(recent-filter (parse (formatters :date) "2012-01-02"))
(fi-data-filter-asset-historical-data  data recent-filter)
(exit)
(fi-data-filter-asset-historical-data  data (apply recent-filter % '2012-01-01' ))
(fi-data-filter-asset-historical-data  data (apply recent-filter % "2012-01-01" ))
(def data (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/benchmark_sp500.txt"))  
(fi-data-filter-asset-historical-data  data (apply recent-filter % "2012-01-01" ))
(fi-data-filter-asset-historical-data  data (apply fi-data-from-filter % "2012-01-01" ))
(fi-data-filter-asset-historical-data  data (apply fi-data-from-filter  "2012-01-01" ))
(exit)
(def data (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/benchmark_sp500.txt"))  
(fi-data-filter-asset-historical-data  data )
(fi-data-filter-asset-historical-data  data fi-data-from-filter)
(defn recent-filter [start, ob] (if (> (compare ob (parse (formatters :date) start)) 0 )  true false))
(def my-filter (apply recent-filter "2012-01-01"))
(def my-filter (apply recent-filter ("2012-01-01")))
(def my-filter (apply recent-filter (str "2012-01-01")))
(def my-filter (partial recent-filter "2012-01-01"))
(my-filter ["2012-02-02","2009-01-01","2008-01-01"])
(my-filter "2008-01-01")
(my-filter (parse (formatters :date) "2008-01-01"))
(my-filter (parse (formatters :date) "2013-01-01"))
(print data)
(def my-filter (partial fi-data-from-filter (parse (formatters :date) "2012-01-01")))
(fi-data-filter-asset-historical-data data my-filter)
(def my-filter-1 (partial fi-data-from-filter (parse (formatters :date) "2012-01-01")))
(fi-data-filter-asset-historical-data data my-filter-1)
(exit)
(def data (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/benchmark_sp500.txt"))  
(def my-filter-1 (partial fi-data-from-filter (parse (formatters :date) "2012-01-01")))
(fi-data-filter-asset-historical-data data my-filter-1)
(def my-filter-1 (partial fi-data-from-filter "2012-01-01"))
(fi-data-filter-asset-historical-data data my-filter-1)
(def data-benchmark (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/benchmark_sp500.txt"))  
(def data-asset (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/FPBFX.txt"))  
(def value 33)
(-value)
(neg value)
(negative value)
(sign value)
(fi-sum [1 2 3])
(exit)
(def data-asset (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/FPBFX.txt"))  
(def data-benchmark (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/benchmark_sp500.txt"))  
(def asset-closing ( fi-data-get-asset-closing-price data-asset))
(def benchmark-closing ( fi-data-get-asset-closing-price data-benchmark))
(fi-linear-regression asset-closing benchmark-closing)
(print benchmark-closing)
(fi-mean benchmark-closing)
(fi-add x (* benchmark-closing -1)) 
(exit)
(def data-benchmark (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/benchmark_sp500.txt"))  
(def data-asset (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/FPBFX.txt"))  
(def benchmark-closing ( fi-data-get-asset-closing-price data-benchmark))
(def asset-closing ( fi-data-get-asset-closing-price data-asset))
(fi-linear-regression asset-closing benchmark-closing)
(sort [3 4 1 6 7 2 ])
(tak (sort [3 4 1 6 7 2 ]) 4)
(take (sort [3 4 1 6 7 2 ]) 4)
(taken 4 (sort [3 4 1 6 7 2 ]) )
(take 4 (sort [3 4 1 6 7 2 ]) )
(sort (fi-diff (fi-log  asset-closing)))
(log-returns (sort (fi-diff (fi-log  asset-closing))))
(def log-returns (sort (fi-diff (fi-log  asset-closing))))
(def idx (Math/ceil (* 0.007163820933634657 (count log-returns))) )
(def under-threshold (into [] (take idx log-returns) ) 
)
(count under-threshold)
(count log-returns)
(print idx)
(def idx (Math/ceil (* 0.1 (count log-returns))) )
(def under-threshold (into [] (take idx log-returns) ) 
)
(count under-threshold)
(exit)
(def data-asset (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/FPBFX.txt"))  
(def asset-closing ( fi-data-get-asset-closing-price data-asset))
(fi-cvar data-asset 0.3)
(fi-cvar asset-closing 0.3)
(fi-cvar asset-closing 0.05)
(fi-cvar asset-closing 0.9)
(exit)
(def net  
    (network  (neural-pattern :feed-forward) 
               :activation :sigmoid 
               :input   2
               :output  1
               :hidden [2])) ;;a single hidden layer 
(let [xor-input [[0.0 0.0] [1.0 0.0] [0.0 0.1] [1.0 1.0]]
      xor-ideal [[0.0] [1.0] [1.0] [0.0]] 
      dataset   (data :basic-dataset xor-input xor-ideal)
      trainer   (trainer :back-prop :network net :training-set dataset)]
 (train trainer 0.01 500 []))
(+ 192840.77 353903.37) 
(exit)
exit
(def data-asset (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/FPBFX.txt")) 
(def asset-closing ( fi-data-get-asset-closing-price data-asset)) 
(train-test)
(train-test asset-closing)
exit
(def data-asset (finaicore.core/fi-data-get-asset-historical-data "/Users/edeferia/Dropbox/Reston/Projects/finai/funds/FPBFX.txt")) 
(def asset-closing ( fi-data-get-asset-closing-price data-asset)) 
(train-test asset-closing)
(def training-set (data :basic asset-closing ))
(train-test training-set)
(def training-set (data :basic-dataset asset-closing ))
(train-test training-set)
(def training-set (data :basic-dataset asset-closing asset-closing ))
(train-test training-set)
(def training-set (data :basic-dataset asset-closing (rest asset-closing) ))
(rest asset-closing)
(nthrest asset-closing 1)
(take (- (count asset-closing) 1)  asset-closing)
(def training-set (data :basic-dataset (take (- (count asset-closing) 1)  asset-closing) (rest asset-closing) ))
(train-test training-set)
(take (- (count asset-closing) 1)  asset-closing)
(rest asset-closing)
(load "rnn")
(take (- (count asset-closing) 1)  asset-closing)
(train-test training-set)
(def training-set (data :basic-dataset (take (- (count asset-closing) 2)  asset-closing) (rest asset-closing) ))
(train-test training-set)
(partition 2 1 asset-closing)
(into [] (partition 2 1 asset-closing))
(def input-ds [(28.75 28.93) (28.93 29.43) (29.43 29.11) (29.11 29.24)] )
(def input-ds ['(28.75 28.93) '(28.93 29.43) '(29.43 29.11) '(29.11 29.24)] )
(def output-ds [[28.93] [29.43] [29.11] [29.35]] )
(def training-set (data :basic-dataset input-ds output-ds))
(train-test training-set)
(def results (.compute net [(28.75 28.93) (28.93 29.43) (29.43 29.11) (29.11 29.24)]))
(def results (.compute net ['(28.75 28.93) '(28.93 29.43) '(29.43 29.11) '(29.11 29.24)]))
(def input (data :basic-input ['(28.75 28.93) '(28.93 29.43) '(29.43 29.11) '(29.11 29.24)]))
(def input (data :basic-input [[28.75 28.93] [28.93 29.43] [29.43 29.11] [29.11 29.24]]))
(def input (data :basic-input [28.75 28.93]))
(def input (data :basic [[28.75 28.93] [28.93 29.43] [29.43 29.11] [29.11 29.24]]))
(def input (data :basic [28.75 28.93]))
(def results (.compute net input))
(.getData results)
(first (.getData results))
(nth 1 (.getData results))
(nth 0 (.getData results))
(nth 2 (.getData results))
(first (.getData results))
(load "rnn")
(into [] (partition 2 1 asset-closing))
(into [] (partition 1 1 asset-closing))
(into [] (partition 1 1 (take (count asset-closing) asset-closing) ))
(into [] (partition 1 0 (take (count asset-closing) asset-closing) ))
(into [] (partition 2 1 (take (count asset-closing) asset-closing) ))
(into [] (partition 1 2 (take (count asset-closing) asset-closing) ))
(count (into [] (partition 2 1 asset-closing)))
(def sample '(1 2 3 4 5 6))
(def sample-ds '(1 2 3 4 5 6))
(drop 2 sample-ds)
(def sample-ds (partition 2 1 '(1 2 3 4 5 6)))
(print sample-ds)
(def sample-ds (take 4 sample-ds))
(print sample-ds)
(into [] (drop 2 sample-ds))
(def sample '(1 2 3 4 5 6))
(def sample-ds '(1 2 3 4 5 6))
(def sample-input (partition 2 1 sample-ds))
(def sample-output (parition 1 1 (drop 2 sample-ds)))
(def sample-output (partition 1 1 (drop 2 sample-ds)))
(defin sample-training-set (data :basic-dataset sample-input sample-output))
(defn sample-training-set (data :basic-dataset sample-input sample-output))
(def sample-training-set (data :basic-dataset sample-input sample-output))
(count sample-input)
(count sample-output)
(def sample-input (partition 2 1 sample-ds))
(def sample-input (take (1 (count sample-input) 1) sample-input))
(def sample-input (take (- (count sample-input) 1) sample-input))
(def sample-training-set (data :basic-dataset sample-input sample-output))
(train-test sample-training-set)
(def prediction (.compute nt '(2 3)))
(def prediction (.compute net '(2 3)))
(def prediction (.compute net [(2 3)]))
(def prediction (.compute net (data :basic-input '(2 3))))
(def prediction (.compute net (data :basic-input [2 3])))
